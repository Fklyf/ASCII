<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ASCII Image Converter</title>
    <style>
        body {
            font-family: monospace;
            background-color: #222;
            color: #fff;
            text-align: center;
            padding: 20px;
        }
        #drop-area {
            border: 2px dashed #fff;
            border-radius: 10px;
            padding: 30px;
            margin: 20px;
            cursor: pointer;
        }
        #ascii-output {
            white-space: pre;
            font-size: 6px;
            line-height: 6px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>ASCII Image Converter</h1>
    
    <!-- Drag and drop area -->
    <div id="drop-area">
        <p>Drag an image here or click to select</p>
        <input type="file" id="fileElem" accept="image/*" style="display:none;">
    </div>

    <!-- ASCII Output -->
    <pre id="ascii-output"></pre>

    <canvas id="canvas" style="display:none;"></canvas>

    <script>
        const dropArea = document.getElementById("drop-area");
        const fileInput = document.getElementById("fileElem");
        const asciiOutput = document.getElementById("ascii-output");
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");

        // ASCII characters
        const ASCII_CHARS = "@%#*+=-:. ";

        // Click to select file
        dropArea.addEventListener("click", () => fileInput.click());

        // File input change event
        fileInput.addEventListener("change", handleFiles);

        // Drag and drop events
        dropArea.addEventListener("dragover", (e) => {
            e.preventDefault();
            dropArea.style.backgroundColor = "#333";
        });

        dropArea.addEventListener("dragleave", () => {
            dropArea.style.backgroundColor = "#222";
        });

        dropArea.addEventListener("drop", (e) => {
            e.preventDefault();
            dropArea.style.backgroundColor = "#222";
            const file = e.dataTransfer.files[0];
            if (file) {
                processFile(file);
            }
        });

        // Handle files from input
        function handleFiles(event) {
            const file = event.target.files[0];
            if (file) {
                processFile(file);
            }
        }

        // Process the image file and convert to ASCII
        function processFile(file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const img = new Image();
                img.onload = () => {
                    convertToASCII(img);
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }

        // Convert image to ASCII
        function convertToASCII(img) {
            const width = 100; // Set desired width
            const height = Math.floor(img.height * (width / img.width)); // Maintain aspect ratio
            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);

            const imgData = ctx.getImageData(0, 0, width, height);
            let asciiArt = "";

            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const offset = (y * width + x) * 4;
                    const r = imgData.data[offset];
                    const g = imgData.data[offset + 1];
                    const b = imgData.data[offset + 2];
                    const avg = (r + g + b) / 3;
                    const charIndex = Math.floor((avg / 255) * (ASCII_CHARS.length - 1));
                    asciiArt += ASCII_CHARS[charIndex];
                }
                asciiArt += "\n";
            }

            asciiOutput.textContent = asciiArt;
        }
    <
